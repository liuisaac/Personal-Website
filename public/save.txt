import * as THREE from 'three';
import { Canvas, extend, useFrame, useLoader, useThree } from '@react-three/fiber';
import { useEffect, useMemo, useCallback, useRef, Suspense, useState } from 'react';
import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
// import wavepoint from './assets/Home/Hero/Three/wavepoint.svg';
import SceneInit from './global/class/SceneInit';
import './App.css'



function App() {
  const COLUMNS = 40;
  const size=20;
  const spacing = 12;
  const positions = new Float32Array(COLUMNS * COLUMNS * 3);
  const geometry = new THREE.BufferGeometry()
  const [speed, setSpeed] = useState(0);
  const positionRef = useRef()


  const f = 0.0002;
  const a = 10;

  const graph = (x: number, z:number, t: number) => {
    return Math.sin(f * ((2*x) ** 2 + (2*z) ** 2) + t) * a;
  }

  useEffect(() => {
    const test = new SceneInit('ThreeJsCanvas');
    test.initialize();
    test.animate();

    const loader = new GLTFLoader();
    const modelPath = 'src/assets/Home/Hero/Three/benchy.glb'; // Path to the exported glTF file
    
    loader.load(
      modelPath,
      (gltf: GLTF) => {
        const model = gltf.scene;
        test.scene.add(model);
      },
      undefined,
      (error) => {
        console.error('Error loading glTF model:', error);
      }
    );

    // Load your SVG texture
    const textureLoader = new THREE.TextureLoader();
    const texture = textureLoader.load('src/assets/Home/Hero/Three/wavepoint.png');

    const material = new THREE.PointsMaterial({
      color: 0xffffff,
      size: 3.0, // Adjust the size of the circles
      map: texture,
      transparent: false, // Enable transparency
    });
    const buffer = new THREE.BufferAttribute(positions, 3)
    geometry.setAttribute('position', buffer);

    

    for (let row = 0; row < COLUMNS; row++) {
      for (let col = 0; col < COLUMNS; col++) {
        const x = (col / (COLUMNS - 1) - 0.5) * size * spacing; // Distribute points along x-axis
        const z = (row / (COLUMNS - 1) - 0.5) * size * spacing; // Distribute points along z-axis
        const y = graph(x, z, speed); // Keep the y-coordinate at 0 (2D grid)
    
        const index = (row * COLUMNS + col) * 3;
        positions[index] = x;
        positions[index + 1] = y;
        positions[index + 2] = z;
      }
    }

    const mesh = new THREE.Points( geometry, material );

    test.scene.add(mesh);
  }, []);

  useFrame(() => {
    setSpeed(speed+0.1);


  });


  return (
    <div>
      <canvas id="ThreeJsCanvas"></canvas>
    </div>
  )
}

export default App
